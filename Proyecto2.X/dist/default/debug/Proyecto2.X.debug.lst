

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Nov 11 18:54:44 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    20                           	dabs	1,0x7E,2
    21     0000                     
    22                           ; Version 2.40
    23                           ; Generated 17/11/2021 GMT
    24                           ; 
    25                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F887 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57     0000                     	;# 
    58     0001                     	;# 
    59     0002                     	;# 
    60     0003                     	;# 
    61     0004                     	;# 
    62     0005                     	;# 
    63     0006                     	;# 
    64     0007                     	;# 
    65     0008                     	;# 
    66     0009                     	;# 
    67     000A                     	;# 
    68     000B                     	;# 
    69     000C                     	;# 
    70     000D                     	;# 
    71     000E                     	;# 
    72     000E                     	;# 
    73     000F                     	;# 
    74     0010                     	;# 
    75     0011                     	;# 
    76     0012                     	;# 
    77     0013                     	;# 
    78     0014                     	;# 
    79     0015                     	;# 
    80     0015                     	;# 
    81     0016                     	;# 
    82     0017                     	;# 
    83     0018                     	;# 
    84     0019                     	;# 
    85     001A                     	;# 
    86     001B                     	;# 
    87     001B                     	;# 
    88     001C                     	;# 
    89     001D                     	;# 
    90     001E                     	;# 
    91     001F                     	;# 
    92     0081                     	;# 
    93     0085                     	;# 
    94     0086                     	;# 
    95     0087                     	;# 
    96     0088                     	;# 
    97     0089                     	;# 
    98     008C                     	;# 
    99     008D                     	;# 
   100     008E                     	;# 
   101     008F                     	;# 
   102     0090                     	;# 
   103     0091                     	;# 
   104     0092                     	;# 
   105     0093                     	;# 
   106     0093                     	;# 
   107     0093                     	;# 
   108     0094                     	;# 
   109     0095                     	;# 
   110     0096                     	;# 
   111     0097                     	;# 
   112     0098                     	;# 
   113     0099                     	;# 
   114     009A                     	;# 
   115     009B                     	;# 
   116     009C                     	;# 
   117     009D                     	;# 
   118     009E                     	;# 
   119     009F                     	;# 
   120     0105                     	;# 
   121     0107                     	;# 
   122     0108                     	;# 
   123     0109                     	;# 
   124     010C                     	;# 
   125     010C                     	;# 
   126     010D                     	;# 
   127     010E                     	;# 
   128     010F                     	;# 
   129     0185                     	;# 
   130     0187                     	;# 
   131     0188                     	;# 
   132     0189                     	;# 
   133     018C                     	;# 
   134     018D                     	;# 
   135     0000                     	;# 
   136     0001                     	;# 
   137     0002                     	;# 
   138     0003                     	;# 
   139     0004                     	;# 
   140     0005                     	;# 
   141     0006                     	;# 
   142     0007                     	;# 
   143     0008                     	;# 
   144     0009                     	;# 
   145     000A                     	;# 
   146     000B                     	;# 
   147     000C                     	;# 
   148     000D                     	;# 
   149     000E                     	;# 
   150     000E                     	;# 
   151     000F                     	;# 
   152     0010                     	;# 
   153     0011                     	;# 
   154     0012                     	;# 
   155     0013                     	;# 
   156     0014                     	;# 
   157     0015                     	;# 
   158     0015                     	;# 
   159     0016                     	;# 
   160     0017                     	;# 
   161     0018                     	;# 
   162     0019                     	;# 
   163     001A                     	;# 
   164     001B                     	;# 
   165     001B                     	;# 
   166     001C                     	;# 
   167     001D                     	;# 
   168     001E                     	;# 
   169     001F                     	;# 
   170     0081                     	;# 
   171     0085                     	;# 
   172     0086                     	;# 
   173     0087                     	;# 
   174     0088                     	;# 
   175     0089                     	;# 
   176     008C                     	;# 
   177     008D                     	;# 
   178     008E                     	;# 
   179     008F                     	;# 
   180     0090                     	;# 
   181     0091                     	;# 
   182     0092                     	;# 
   183     0093                     	;# 
   184     0093                     	;# 
   185     0093                     	;# 
   186     0094                     	;# 
   187     0095                     	;# 
   188     0096                     	;# 
   189     0097                     	;# 
   190     0098                     	;# 
   191     0099                     	;# 
   192     009A                     	;# 
   193     009B                     	;# 
   194     009C                     	;# 
   195     009D                     	;# 
   196     009E                     	;# 
   197     009F                     	;# 
   198     0105                     	;# 
   199     0107                     	;# 
   200     0108                     	;# 
   201     0109                     	;# 
   202     010C                     	;# 
   203     010C                     	;# 
   204     010D                     	;# 
   205     010E                     	;# 
   206     010F                     	;# 
   207     0185                     	;# 
   208     0187                     	;# 
   209     0188                     	;# 
   210     0189                     	;# 
   211     018C                     	;# 
   212     018D                     	;# 
   213     000C                     _PIR1bits	set	12
   214     0018                     _RCSTAbits	set	24
   215     001D                     _CCP2CONbits	set	29
   216     0012                     _T2CONbits	set	18
   217     0017                     _CCP1CONbits	set	23
   218     0019                     _TXREG	set	25
   219     001A                     _RCREG	set	26
   220     001B                     _CCPR2L	set	27
   221     0015                     _CCPR1L	set	21
   222     001E                     _ADRESH	set	30
   223     001F                     _ADCON0bits	set	31
   224     0008                     _PORTD	set	8
   225     0006                     _PORTBbits	set	6
   226     0092                     _TMR2ON	set	146
   227     0061                     _TMR2IF	set	97
   228     0064                     _TXIF	set	100
   229     0065                     _RCIF	set	101
   230     0066                     _ADIF	set	102
   231     0098                     _TXSTAbits	set	152
   232     0099                     _SPBRG	set	153
   233     009F                     _ADCON1bits	set	159
   234     0085                     _TRISAbits	set	133
   235     0092                     _PR2	set	146
   236     0087                     _TRISCbits	set	135
   237     008F                     _OSCCONbits	set	143
   238     0088                     _TRISD	set	136
   239     0086                     _TRISBbits	set	134
   240     0188                     _ANSELbits	set	392
   241     0189                     _ANSELH	set	393
   242                           
   243                           	psect	strings
   244     0003                     __pstrings:
   245     0003                     stringtab:
   246     0003                     __stringtab:
   247     0003                     stringcode:	
   248                           ;	String table - string pointers are 1 byte each
   249                           
   250     0003                     stringdir:
   251     0003  3000               	movlw	high stringdir
   252     0004  008A               	movwf	10
   253     0005  0804               	movf	4,w
   254     0006  0A84               	incf	4,f
   255     0007  0782               	addwf	2,f
   256     0008                     __stringbase:
   257     0008  3400               	retlw	0
   258     0009                     __end_of__stringtab:
   259     0009                     STR_3:
   260     0009  3453               	retlw	83	;'S'
   261     000A  346F               	retlw	111	;'o'
   262     000B  346C               	retlw	108	;'l'
   263     000C  346F               	retlw	111	;'o'
   264     000D  3420               	retlw	32	;' '
   265     000E  3464               	retlw	100	;'d'
   266     000F  3465               	retlw	101	;'e'
   267     0010  3462               	retlw	98	;'b'
   268     0011  3465               	retlw	101	;'e'
   269     0012  3420               	retlw	32	;' '
   270     0013  3469               	retlw	105	;'i'
   271     0014  346E               	retlw	110	;'n'
   272     0015  3467               	retlw	103	;'g'
   273     0016  3472               	retlw	114	;'r'
   274     0017  3465               	retlw	101	;'e'
   275     0018  3473               	retlw	115	;'s'
   276     0019  3461               	retlw	97	;'a'
   277     001A  3472               	retlw	114	;'r'
   278     001B  3420               	retlw	32	;' '
   279     001C  3476               	retlw	118	;'v'
   280     001D  3461               	retlw	97	;'a'
   281     001E  346C               	retlw	108	;'l'
   282     001F  346F               	retlw	111	;'o'
   283     0020  3472               	retlw	114	;'r'
   284     0021  3465               	retlw	101	;'e'
   285     0022  3473               	retlw	115	;'s'
   286     0023  3420               	retlw	32	;' '
   287     0024  3465               	retlw	101	;'e'
   288     0025  346E               	retlw	110	;'n'
   289     0026  3474               	retlw	116	;'t'
   290     0027  3472               	retlw	114	;'r'
   291     0028  3465               	retlw	101	;'e'
   292     0029  3420               	retlw	32	;' '
   293     002A  3437               	retlw	55	;'7'
   294     002B  3420               	retlw	32	;' '
   295     002C  3479               	retlw	121	;'y'
   296     002D  3420               	retlw	32	;' '
   297     002E  3431               	retlw	49	;'1'
   298     002F  3436               	retlw	54	;'6'
   299     0030  3400               	retlw	0
   300     0031                     STR_1:
   301     0031  3450               	retlw	80	;'P'
   302     0032  3472               	retlw	114	;'r'
   303     0033  3465               	retlw	101	;'e'
   304     0034  3473               	retlw	115	;'s'
   305     0035  3469               	retlw	105	;'i'
   306     0036  346F               	retlw	111	;'o'
   307     0037  346E               	retlw	110	;'n'
   308     0038  3465               	retlw	101	;'e'
   309     0039  3420               	retlw	32	;' '
   310     003A  3431               	retlw	49	;'1'
   311     003B  3420               	retlw	32	;' '
   312     003C  3470               	retlw	112	;'p'
   313     003D  3461               	retlw	97	;'a'
   314     003E  3472               	retlw	114	;'r'
   315     003F  3461               	retlw	97	;'a'
   316     0040  3420               	retlw	32	;' '
   317     0041  3463               	retlw	99	;'c'
   318     0042  346F               	retlw	111	;'o'
   319     0043  346E               	retlw	110	;'n'
   320     0044  3474               	retlw	116	;'t'
   321     0045  3472               	retlw	114	;'r'
   322     0046  346F               	retlw	111	;'o'
   323     0047  346C               	retlw	108	;'l'
   324     0048  3461               	retlw	97	;'a'
   325     0049  3472               	retlw	114	;'r'
   326     004A  3420               	retlw	32	;' '
   327     004B  346C               	retlw	108	;'l'
   328     004C  3461               	retlw	97	;'a'
   329     004D  3420               	retlw	32	;' '
   330     004E  3467               	retlw	103	;'g'
   331     004F  3461               	retlw	97	;'a'
   332     0050  3472               	retlw	114	;'r'
   333     0051  3472               	retlw	114	;'r'
   334     0052  3461               	retlw	97	;'a'
   335     0053  3400               	retlw	0
   336     0054                     STR_2:
   337     0054  3450               	retlw	80	;'P'
   338     0055  3472               	retlw	114	;'r'
   339     0056  3465               	retlw	101	;'e'
   340     0057  3473               	retlw	115	;'s'
   341     0058  3469               	retlw	105	;'i'
   342     0059  346F               	retlw	111	;'o'
   343     005A  346E               	retlw	110	;'n'
   344     005B  3465               	retlw	101	;'e'
   345     005C  3420               	retlw	32	;' '
   346     005D  3432               	retlw	50	;'2'
   347     005E  3420               	retlw	32	;' '
   348     005F  3470               	retlw	112	;'p'
   349     0060  3461               	retlw	97	;'a'
   350     0061  3472               	retlw	114	;'r'
   351     0062  3461               	retlw	97	;'a'
   352     0063  3420               	retlw	32	;' '
   353     0064  3463               	retlw	99	;'c'
   354     0065  346F               	retlw	111	;'o'
   355     0066  346E               	retlw	110	;'n'
   356     0067  3474               	retlw	116	;'t'
   357     0068  3472               	retlw	114	;'r'
   358     0069  346F               	retlw	111	;'o'
   359     006A  346C               	retlw	108	;'l'
   360     006B  3461               	retlw	97	;'a'
   361     006C  3472               	retlw	114	;'r'
   362     006D  3420               	retlw	32	;' '
   363     006E  3465               	retlw	101	;'e'
   364     006F  346C               	retlw	108	;'l'
   365     0070  3420               	retlw	32	;' '
   366     0071  3462               	retlw	98	;'b'
   367     0072  3472               	retlw	114	;'r'
   368     0073  3461               	retlw	97	;'a'
   369     0074  347A               	retlw	122	;'z'
   370     0075  346F               	retlw	111	;'o'
   371     0076  3400               	retlw	0
   372     0009                     
   373                           	psect	cinit
   374     07F3                     start_initialization:	
   375                           ; #config settings
   376                           
   377     07F3                     __initialization:
   378                           
   379                           ; Clear objects allocated to COMMON
   380     07F3  01FB               	clrf	__pbssCOMMON& (0+127)
   381     07F4  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   382     07F5  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
   383                           
   384                           ; Clear objects allocated to BANK0
   385     07F6  1283               	bcf	3,5	;RP0=0, select bank0
   386     07F7  1303               	bcf	3,6	;RP1=0, select bank0
   387     07F8  01A0               	clrf	__pbssBANK0& (0+127)
   388     07F9  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   389     07FA  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   390     07FB  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   391     07FC                     end_of_initialization:	
   392                           ;End of C runtime variable initialization code
   393                           
   394     07FC                     __end_of__initialization:
   395     07FC  0183               	clrf	3
   396     07FD  120A  118A  2EB9   	ljmp	_main	;jump to C main() function
   397                           
   398                           	psect	bssCOMMON
   399     007B                     __pbssCOMMON:
   400     007B                     _a:
   401     007B                     	ds	1
   402     007C                     _recibido:
   403     007C                     	ds	1
   404     007D                     _i:
   405     007D                     	ds	1
   406                           
   407                           	psect	bssBANK0
   408     0020                     __pbssBANK0:
   409     0020                     _ADC2:
   410     0020                     	ds	2
   411     0022                     _ADC1:
   412     0022                     	ds	2
   413                           
   414                           	psect	cstackCOMMON
   415     0070                     __pcstackCOMMON:
   416     0070                     ?_setup:
   417     0070                     ??_setup:	
   418                           ; 1 bytes @ 0x0
   419                           
   420     0070                     ?_setupintosc:	
   421                           ; 1 bytes @ 0x0
   422                           
   423     0070                     ??_setupintosc:	
   424                           ; 1 bytes @ 0x0
   425                           
   426     0070                     ?_setupPWM:	
   427                           ; 1 bytes @ 0x0
   428                           
   429     0070                     ??_setupPWM:	
   430                           ; 1 bytes @ 0x0
   431                           
   432     0070                     ?_setupPWM2:	
   433                           ; 1 bytes @ 0x0
   434                           
   435     0070                     ??_setupPWM2:	
   436                           ; 1 bytes @ 0x0
   437                           
   438     0070                     ?_setupADC:	
   439                           ; 1 bytes @ 0x0
   440                           
   441     0070                     ??_setupADC:	
   442                           ; 1 bytes @ 0x0
   443                           
   444     0070                     ?_initUART:	
   445                           ; 1 bytes @ 0x0
   446                           
   447     0070                     ??_initUART:	
   448                           ; 1 bytes @ 0x0
   449                           
   450     0070                     ?_mandar:	
   451                           ; 1 bytes @ 0x0
   452                           
   453     0070                     ??_mandar:	
   454                           ; 1 bytes @ 0x0
   455                           
   456     0070                     ?_main:	
   457                           ; 1 bytes @ 0x0
   458                           
   459     0070                     ?___awdiv:	
   460                           ; 1 bytes @ 0x0
   461                           
   462     0070                     ___awdiv@divisor:	
   463                           ; 2 bytes @ 0x0
   464                           
   465                           
   466                           ; 2 bytes @ 0x0
   467     0070                     	ds	1
   468     0071                     mandar@cadena:
   469                           
   470                           ; 1 bytes @ 0x1
   471     0071                     	ds	1
   472     0072                     ___awdiv@dividend:
   473                           
   474                           ; 2 bytes @ 0x2
   475     0072                     	ds	2
   476     0074                     ??___awdiv:
   477                           
   478                           ; 1 bytes @ 0x4
   479     0074                     	ds	1
   480     0075                     ___awdiv@counter:
   481                           
   482                           ; 1 bytes @ 0x5
   483     0075                     	ds	1
   484     0076                     ___awdiv@sign:
   485                           
   486                           ; 1 bytes @ 0x6
   487     0076                     	ds	1
   488     0077                     ___awdiv@quotient:
   489                           
   490                           ; 2 bytes @ 0x7
   491     0077                     	ds	2
   492     0079                     ??_main:
   493                           
   494                           ; 1 bytes @ 0x9
   495     0079                     	ds	2
   496                           
   497                           	psect	maintext
   498     06B9                     __pmaintext:	
   499 ;;
   500 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   501 ;;
   502 ;; *************** function _main *****************
   503 ;; Defined at:
   504 ;;		line 55 in file "main.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;		None
   507 ;; Auto vars:     Size  Location     Type
   508 ;;		None
   509 ;; Return value:  Size  Location     Type
   510 ;;                  1    wreg      void 
   511 ;; Registers used:
   512 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   513 ;; Tracked objects:
   514 ;;		On entry : B00/0
   515 ;;		On exit  : 0/0
   516 ;;		Unchanged: 0/0
   517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   518 ;;      Params:         0       0       0       0       0
   519 ;;      Locals:         0       0       0       0       0
   520 ;;      Temps:          2       0       0       0       0
   521 ;;      Totals:         2       0       0       0       0
   522 ;;Total ram usage:        2 bytes
   523 ;; Hardware stack levels required when called: 2
   524 ;; This function calls:
   525 ;;		___awdiv
   526 ;;		_initUART
   527 ;;		_mandar
   528 ;;		_setup
   529 ;;		_setupADC
   530 ;;		_setupPWM
   531 ;;		_setupPWM2
   532 ;;		_setupintosc
   533 ;; This function is called by:
   534 ;;		Startup code after reset
   535 ;; This function uses a non-reentrant model
   536 ;;
   537                           
   538     06B9                     _main:	
   539                           ;psect for function _main
   540                           
   541     06B9                     l1066:	
   542                           ;incstack = 0
   543                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   544                           
   545                           
   546                           ;main.c: 56:     setup();
   547     06B9  120A  118A  25C5  120A  118A  	fcall	_setup
   548     06BE                     l1068:
   549                           
   550                           ;main.c: 57:     setupintosc();
   551     06BE  120A  118A  25AD  120A  118A  	fcall	_setupintosc
   552     06C3                     l1070:
   553                           
   554                           ;main.c: 58:     setupPWM();
   555     06C3  120A  118A  25F6  120A  118A  	fcall	_setupPWM
   556     06C8                     l1072:
   557                           
   558                           ;main.c: 59:     setupPWM2();
   559     06C8  120A  118A  25DD  120A  118A  	fcall	_setupPWM2
   560     06CD                     l1074:
   561                           
   562                           ;main.c: 60:     setupADC();
   563     06CD  120A  118A  2613  120A  118A  	fcall	_setupADC
   564     06D2                     l1076:
   565                           
   566                           ;main.c: 61:     initUART();
   567     06D2  120A  118A  25B5  120A  118A  	fcall	_initUART
   568     06D7                     l1078:
   569                           
   570                           ;main.c: 63:         if(PORTBbits.RB1 == 1){
   571     06D7  1283               	bcf	3,5	;RP0=0, select bank0
   572     06D8  1303               	bcf	3,6	;RP1=0, select bank0
   573     06D9  1C86               	btfss	6,1	;volatile
   574     06DA  2EDC               	goto	u461
   575     06DB  2EDD               	goto	u460
   576     06DC                     u461:
   577     06DC  2EEB               	goto	l90
   578     06DD                     u460:
   579     06DD                     l1080:
   580                           
   581                           ;main.c: 64:             _delay((unsigned long)((100)*(500000/4000.0)));
   582     06DD  3011               	movlw	17
   583     06DE  00FA               	movwf	??_main+1
   584     06DF  303A               	movlw	58
   585     06E0  00F9               	movwf	??_main
   586     06E1                     u637:
   587     06E1  0BF9               	decfsz	??_main,f
   588     06E2  2EE1               	goto	u637
   589     06E3  0BFA               	decfsz	??_main+1,f
   590     06E4  2EE1               	goto	u637
   591     06E5  0000               	nop
   592     06E6                     l1082:
   593                           
   594                           ;main.c: 65:             a++;
   595     06E6  3001               	movlw	1
   596     06E7  00F9               	movwf	??_main
   597     06E8  0879               	movf	??_main,w
   598     06E9  07FB               	addwf	_a,f
   599                           
   600                           ;main.c: 66:         }
   601     06EA  2EFC               	goto	l1088
   602     06EB                     l90:	
   603                           ;main.c: 67:         else if (PORTBbits.RB2 == 1){
   604                           
   605     06EB  1D06               	btfss	6,2	;volatile
   606     06EC  2EEE               	goto	u471
   607     06ED  2EEF               	goto	u470
   608     06EE                     u471:
   609     06EE  2EFC               	goto	l1088
   610     06EF                     u470:
   611     06EF                     l1084:
   612                           
   613                           ;main.c: 68:             _delay((unsigned long)((100)*(500000/4000.0)));
   614     06EF  3011               	movlw	17
   615     06F0  00FA               	movwf	??_main+1
   616     06F1  303A               	movlw	58
   617     06F2  00F9               	movwf	??_main
   618     06F3                     u647:
   619     06F3  0BF9               	decfsz	??_main,f
   620     06F4  2EF3               	goto	u647
   621     06F5  0BFA               	decfsz	??_main+1,f
   622     06F6  2EF3               	goto	u647
   623     06F7  0000               	nop
   624     06F8                     l1086:
   625                           
   626                           ;main.c: 69:             a--;
   627     06F8  30FF               	movlw	255
   628     06F9  00F9               	movwf	??_main
   629     06FA  0879               	movf	??_main,w
   630     06FB  07FB               	addwf	_a,f
   631     06FC                     l1088:
   632                           
   633                           ;main.c: 71:         PORTD = a;
   634     06FC  087B               	movf	_a,w
   635     06FD  1283               	bcf	3,5	;RP0=0, select bank0
   636     06FE  1303               	bcf	3,6	;RP1=0, select bank0
   637     06FF  0088               	movwf	8	;volatile
   638                           
   639                           ;main.c: 72:         if(a == 1){
   640     0700  037B               	decf	_a,w
   641     0701  1D03               	btfss	3,2
   642     0702  2F04               	goto	u481
   643     0703  2F05               	goto	u480
   644     0704                     u481:
   645     0704  2F8F               	goto	l1124
   646     0705                     u480:
   647     0705                     l1090:
   648                           
   649                           ;main.c: 73:             PORTBbits.RB3 = 1;
   650     0705  1586               	bsf	6,3	;volatile
   651                           
   652                           ;main.c: 74:             PORTBbits.RB4 = 0;
   653     0706  1206               	bcf	6,4	;volatile
   654     0707                     l1092:
   655                           
   656                           ;main.c: 75:             ADCON0bits.CHS = 0b0000;
   657     0707  30C3               	movlw	-61
   658     0708  059F               	andwf	31,f	;volatile
   659     0709                     l1094:
   660                           
   661                           ;main.c: 76:             _delay((unsigned long)((100)*(500000/4000.0)));
   662     0709  3011               	movlw	17
   663     070A  00FA               	movwf	??_main+1
   664     070B  303A               	movlw	58
   665     070C  00F9               	movwf	??_main
   666     070D                     u657:
   667     070D  0BF9               	decfsz	??_main,f
   668     070E  2F0D               	goto	u657
   669     070F  0BFA               	decfsz	??_main+1,f
   670     0710  2F0D               	goto	u657
   671     0711  0000               	nop
   672     0712                     l1096:
   673                           
   674                           ;main.c: 77:             ADCON0bits.GO = 1;
   675     0712  1283               	bcf	3,5	;RP0=0, select bank0
   676     0713  1303               	bcf	3,6	;RP1=0, select bank0
   677     0714  149F               	bsf	31,1	;volatile
   678     0715                     l94:	
   679                           ;main.c: 78:             while(ADCON0bits.GO == 1){;}
   680                           
   681     0715  189F               	btfsc	31,1	;volatile
   682     0716  2F18               	goto	u491
   683     0717  2F19               	goto	u490
   684     0718                     u491:
   685     0718  2F15               	goto	l94
   686     0719                     u490:
   687     0719                     l96:
   688                           
   689                           ;main.c: 79:             ADIF = 0;
   690     0719  130C               	bcf	12,6	;volatile
   691     071A                     l1098:
   692                           
   693                           ;main.c: 80:             ADC1 = ADRESH;
   694     071A  081E               	movf	30,w	;volatile
   695     071B  00F9               	movwf	??_main
   696     071C  01FA               	clrf	??_main+1
   697     071D  0879               	movf	??_main,w
   698     071E  00A2               	movwf	_ADC1
   699     071F  087A               	movf	??_main+1,w
   700     0720  00A3               	movwf	_ADC1+1
   701     0721                     l1100:
   702                           
   703                           ;main.c: 81:             i = ADC1/16;
   704     0721  3010               	movlw	16
   705     0722  00F0               	movwf	___awdiv@divisor
   706     0723  3000               	movlw	0
   707     0724  00F1               	movwf	___awdiv@divisor+1
   708     0725  0823               	movf	_ADC1+1,w
   709     0726  00F3               	movwf	___awdiv@dividend+1
   710     0727  0822               	movf	_ADC1,w
   711     0728  00F2               	movwf	___awdiv@dividend
   712     0729  120A  118A  2652  120A  118A  	fcall	___awdiv
   713     072E  0870               	movf	?___awdiv,w
   714     072F  00FD               	movwf	_i
   715     0730                     l1102:
   716                           
   717                           ;main.c: 82:             if(i > 7 && 16 > i){
   718     0730  3008               	movlw	8
   719     0731  027D               	subwf	_i,w
   720     0732  1C03               	skipc
   721     0733  2F35               	goto	u501
   722     0734  2F36               	goto	u500
   723     0735                     u501:
   724     0735  2F49               	goto	l1108
   725     0736                     u500:
   726     0736                     l1104:
   727     0736  3010               	movlw	16
   728     0737  027D               	subwf	_i,w
   729     0738  1803               	skipnc
   730     0739  2F3B               	goto	u511
   731     073A  2F3C               	goto	u510
   732     073B                     u511:
   733     073B  2F49               	goto	l1108
   734     073C                     u510:
   735     073C                     l1106:
   736                           
   737                           ;main.c: 83:                 CCPR1L = i;
   738     073C  087D               	movf	_i,w
   739     073D  1283               	bcf	3,5	;RP0=0, select bank0
   740     073E  1303               	bcf	3,6	;RP1=0, select bank0
   741     073F  0095               	movwf	21	;volatile
   742                           
   743                           ;main.c: 84:                 _delay((unsigned long)((100)*(500000/4000.0)));
   744     0740  3011               	movlw	17
   745     0741  00FA               	movwf	??_main+1
   746     0742  303A               	movlw	58
   747     0743  00F9               	movwf	??_main
   748     0744                     u667:
   749     0744  0BF9               	decfsz	??_main,f
   750     0745  2F44               	goto	u667
   751     0746  0BFA               	decfsz	??_main+1,f
   752     0747  2F44               	goto	u667
   753     0748  0000               	nop
   754     0749                     l1108:	
   755                           ;main.c: 85:             }else {i = i;}
   756                           
   757                           
   758                           ;main.c: 86:             ADCON0bits.CHS = 0b0001;
   759     0749  1283               	bcf	3,5	;RP0=0, select bank0
   760     074A  1303               	bcf	3,6	;RP1=0, select bank0
   761     074B  081F               	movf	31,w	;volatile
   762     074C  39C3               	andlw	-61
   763     074D  3804               	iorlw	4
   764     074E  009F               	movwf	31	;volatile
   765     074F                     l1110:
   766                           
   767                           ;main.c: 87:             _delay((unsigned long)((100)*(500000/4000.0)));
   768     074F  3011               	movlw	17
   769     0750  00FA               	movwf	??_main+1
   770     0751  303A               	movlw	58
   771     0752  00F9               	movwf	??_main
   772     0753                     u677:
   773     0753  0BF9               	decfsz	??_main,f
   774     0754  2F53               	goto	u677
   775     0755  0BFA               	decfsz	??_main+1,f
   776     0756  2F53               	goto	u677
   777     0757  0000               	nop
   778     0758                     l1112:
   779                           
   780                           ;main.c: 88:             ADCON0bits.GO = 1;
   781     0758  1283               	bcf	3,5	;RP0=0, select bank0
   782     0759  1303               	bcf	3,6	;RP1=0, select bank0
   783     075A  149F               	bsf	31,1	;volatile
   784     075B                     l99:	
   785                           ;main.c: 89:             while(ADCON0bits.GO == 1){;}
   786                           
   787     075B  189F               	btfsc	31,1	;volatile
   788     075C  2F5E               	goto	u521
   789     075D  2F5F               	goto	u520
   790     075E                     u521:
   791     075E  2F5B               	goto	l99
   792     075F                     u520:
   793     075F                     l101:
   794                           
   795                           ;main.c: 90:             ADIF = 0;
   796     075F  130C               	bcf	12,6	;volatile
   797     0760                     l1114:
   798                           
   799                           ;main.c: 91:             ADC2 = ADRESH;
   800     0760  081E               	movf	30,w	;volatile
   801     0761  00F9               	movwf	??_main
   802     0762  01FA               	clrf	??_main+1
   803     0763  0879               	movf	??_main,w
   804     0764  00A0               	movwf	_ADC2
   805     0765  087A               	movf	??_main+1,w
   806     0766  00A1               	movwf	_ADC2+1
   807     0767                     l1116:
   808                           
   809                           ;main.c: 92:             i = ADC2/16;
   810     0767  3010               	movlw	16
   811     0768  00F0               	movwf	___awdiv@divisor
   812     0769  3000               	movlw	0
   813     076A  00F1               	movwf	___awdiv@divisor+1
   814     076B  0821               	movf	_ADC2+1,w
   815     076C  00F3               	movwf	___awdiv@dividend+1
   816     076D  0820               	movf	_ADC2,w
   817     076E  00F2               	movwf	___awdiv@dividend
   818     076F  120A  118A  2652  120A  118A  	fcall	___awdiv
   819     0774  0870               	movf	?___awdiv,w
   820     0775  00FD               	movwf	_i
   821     0776                     l1118:
   822                           
   823                           ;main.c: 93:             if(i > 7 && 16 > i){
   824     0776  3008               	movlw	8
   825     0777  027D               	subwf	_i,w
   826     0778  1C03               	skipc
   827     0779  2F7B               	goto	u531
   828     077A  2F7C               	goto	u530
   829     077B                     u531:
   830     077B  2F8F               	goto	l1124
   831     077C                     u530:
   832     077C                     l1120:
   833     077C  3010               	movlw	16
   834     077D  027D               	subwf	_i,w
   835     077E  1803               	skipnc
   836     077F  2F81               	goto	u541
   837     0780  2F82               	goto	u540
   838     0781                     u541:
   839     0781  2F8F               	goto	l1124
   840     0782                     u540:
   841     0782                     l1122:
   842                           
   843                           ;main.c: 94:                 CCPR2L = i;
   844     0782  087D               	movf	_i,w
   845     0783  1283               	bcf	3,5	;RP0=0, select bank0
   846     0784  1303               	bcf	3,6	;RP1=0, select bank0
   847     0785  009B               	movwf	27	;volatile
   848                           
   849                           ;main.c: 95:                 _delay((unsigned long)((100)*(500000/4000.0)));
   850     0786  3011               	movlw	17
   851     0787  00FA               	movwf	??_main+1
   852     0788  303A               	movlw	58
   853     0789  00F9               	movwf	??_main
   854     078A                     u687:
   855     078A  0BF9               	decfsz	??_main,f
   856     078B  2F8A               	goto	u687
   857     078C  0BFA               	decfsz	??_main+1,f
   858     078D  2F8A               	goto	u687
   859     078E  0000               	nop
   860     078F                     l1124:	
   861                           ;main.c: 96:             }else {i = i;}
   862                           
   863                           
   864                           ;main.c: 98:         if(a == 2){
   865     078F  3002               	movlw	2
   866     0790  067B               	xorwf	_a,w
   867     0791  1D03               	btfss	3,2
   868     0792  2F94               	goto	u551
   869     0793  2F95               	goto	u550
   870     0794                     u551:
   871     0794  2ED7               	goto	l1078
   872     0795                     u550:
   873     0795                     l1126:
   874                           
   875                           ;main.c: 99:             PORTBbits.RB4 = 1;
   876     0795  1283               	bcf	3,5	;RP0=0, select bank0
   877     0796  1303               	bcf	3,6	;RP1=0, select bank0
   878     0797  1606               	bsf	6,4	;volatile
   879                           
   880                           ;main.c: 100:             PORTBbits.RB3 = 0;
   881     0798  1186               	bcf	6,3	;volatile
   882     0799                     l1128:
   883                           
   884                           ;main.c: 101:             mandar("Presione 1 para controlar la garra");
   885     0799  3029               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   886     079A  120A  118A  2631  120A  118A  	fcall	_mandar
   887                           
   888                           ;main.c: 102:             mandar("Presione 2 para controlar el brazo");
   889     079F  304C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   890     07A0  120A  118A  2631  120A  118A  	fcall	_mandar
   891     07A5                     l105:	
   892                           ;main.c: 103:             while(RCIF == 0){;}
   893                           
   894     07A5  1283               	bcf	3,5	;RP0=0, select bank0
   895     07A6  1303               	bcf	3,6	;RP1=0, select bank0
   896     07A7  1E8C               	btfss	12,5	;volatile
   897     07A8  2FAA               	goto	u561
   898     07A9  2FAB               	goto	u560
   899     07AA                     u561:
   900     07AA  2FA5               	goto	l105
   901     07AB                     u560:
   902     07AB                     l1130:
   903                           
   904                           ;main.c: 104:             _delay((unsigned long)((100)*(500000/4000000.0)));
   905     07AB  3003               	movlw	3
   906     07AC  00F9               	movwf	??_main
   907     07AD                     u697:
   908     07AD  0BF9               	decfsz	??_main,f
   909     07AE  2FAD               	goto	u697
   910     07AF  2FB0               	nop2
   911                           
   912                           ;main.c: 105:             recibido = RCREG;
   913     07B0  1283               	bcf	3,5	;RP0=0, select bank0
   914     07B1  1303               	bcf	3,6	;RP1=0, select bank0
   915     07B2  081A               	movf	26,w	;volatile
   916     07B3  00FC               	movwf	_recibido
   917     07B4                     l1132:
   918                           
   919                           ;main.c: 106:             if(RCREG == 1){
   920     07B4  031A               	decf	26,w	;volatile
   921     07B5  1D03               	btfss	3,2
   922     07B6  2FB8               	goto	u571
   923     07B7  2FB9               	goto	u570
   924     07B8                     u571:
   925     07B8  2FD1               	goto	l1140
   926     07B9                     u570:
   927     07B9                     l1134:
   928                           
   929                           ;main.c: 107:             mandar("Solo debe ingresar valores entre 7 y 16");
   930     07B9  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   931     07BA  120A  118A  2631  120A  118A  	fcall	_mandar
   932                           
   933                           ;main.c: 108:             while(RCREG >= 7 && RCREG <= 16){
   934     07BF  2FC2               	goto	l109
   935     07C0                     l1136:
   936                           
   937                           ;main.c: 109:                 CCPR1L = RCREG;
   938     07C0  081A               	movf	26,w	;volatile
   939     07C1  0095               	movwf	21	;volatile
   940     07C2                     l109:	
   941                           ;main.c: 110:                 }
   942                           
   943                           
   944                           ;main.c: 108:             while(RCREG >= 7 && RCREG <= 16){
   945     07C2  3007               	movlw	7
   946     07C3  1283               	bcf	3,5	;RP0=0, select bank0
   947     07C4  1303               	bcf	3,6	;RP1=0, select bank0
   948     07C5  021A               	subwf	26,w	;volatile
   949     07C6  1C03               	skipc
   950     07C7  2FC9               	goto	u581
   951     07C8  2FCA               	goto	u580
   952     07C9                     u581:
   953     07C9  2FEF               	goto	l104
   954     07CA                     u580:
   955     07CA                     l1138:
   956     07CA  3011               	movlw	17
   957     07CB  021A               	subwf	26,w	;volatile
   958     07CC  1C03               	skipc
   959     07CD  2FCF               	goto	u591
   960     07CE  2FD0               	goto	u590
   961     07CF                     u591:
   962     07CF  2FC0               	goto	l1136
   963     07D0                     u590:
   964     07D0  2ED7               	goto	l1078
   965     07D1                     l1140:
   966     07D1  3002               	movlw	2
   967     07D2  061A               	xorwf	26,w	;volatile
   968     07D3  1D03               	btfss	3,2
   969     07D4  2FD6               	goto	u601
   970     07D5  2FD7               	goto	u600
   971     07D6                     u601:
   972     07D6  2FEF               	goto	l104
   973     07D7                     u600:
   974     07D7                     l1142:
   975                           
   976                           ;main.c: 112:                 mandar("Solo debe ingresar valores entre 7 y 16");
   977     07D7  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   978     07D8  120A  118A  2631  120A  118A  	fcall	_mandar
   979                           
   980                           ;main.c: 113:                 while(RCREG >= 7 && RCREG <= 16){
   981     07DD  2FE0               	goto	l116
   982     07DE                     l1144:
   983                           
   984                           ;main.c: 114:                     CCPR2L = RCREG;
   985     07DE  081A               	movf	26,w	;volatile
   986     07DF  009B               	movwf	27	;volatile
   987     07E0                     l116:	
   988                           ;main.c: 115:                 }
   989                           
   990                           
   991                           ;main.c: 113:                 while(RCREG >= 7 && RCREG <= 16){
   992     07E0  3007               	movlw	7
   993     07E1  1283               	bcf	3,5	;RP0=0, select bank0
   994     07E2  1303               	bcf	3,6	;RP1=0, select bank0
   995     07E3  021A               	subwf	26,w	;volatile
   996     07E4  1C03               	skipc
   997     07E5  2FE7               	goto	u611
   998     07E6  2FE8               	goto	u610
   999     07E7                     u611:
  1000     07E7  2FEF               	goto	l104
  1001     07E8                     u610:
  1002     07E8                     l1146:
  1003     07E8  3011               	movlw	17
  1004     07E9  021A               	subwf	26,w	;volatile
  1005     07EA  1C03               	skipc
  1006     07EB  2FED               	goto	u621
  1007     07EC  2FEE               	goto	u620
  1008     07ED                     u621:
  1009     07ED  2FDE               	goto	l1144
  1010     07EE                     u620:
  1011     07EE  2ED7               	goto	l1078
  1012     07EF                     l104:	
  1013                           ;main.c: 117:         }
  1014                           
  1015     07EF  2ED7               	goto	l1078
  1016     07F0  120A  118A  2800   	ljmp	start
  1017     07F3                     __end_of_main:
  1018                           
  1019                           	psect	text1
  1020     05AD                     __ptext1:	
  1021 ;; *************** function _setupintosc *****************
  1022 ;; Defined at:
  1023 ;;		line 142 in file "main.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;		None
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;		None
  1028 ;; Return value:  Size  Location     Type
  1029 ;;                  1    wreg      void 
  1030 ;; Registers used:
  1031 ;;		wreg, status,2, status,0
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1037 ;;      Params:         0       0       0       0       0
  1038 ;;      Locals:         0       0       0       0       0
  1039 ;;      Temps:          0       0       0       0       0
  1040 ;;      Totals:         0       0       0       0       0
  1041 ;;Total ram usage:        0 bytes
  1042 ;; Hardware stack levels used: 1
  1043 ;; This function calls:
  1044 ;;		Nothing
  1045 ;; This function is called by:
  1046 ;;		_main
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050     05AD                     _setupintosc:	
  1051                           ;psect for function _setupintosc
  1052                           
  1053     05AD                     l962:	
  1054                           ;incstack = 0
  1055                           ; Regs used in _setupintosc: [wreg+status,2+status,0]
  1056                           
  1057                           
  1058                           ;main.c: 143:     OSCCONbits.IRCF = 0b011;
  1059     05AD  1683               	bsf	3,5	;RP0=1, select bank1
  1060     05AE  1303               	bcf	3,6	;RP1=0, select bank1
  1061     05AF  080F               	movf	15,w	;volatile
  1062     05B0  398F               	andlw	-113
  1063     05B1  3830               	iorlw	48
  1064     05B2  008F               	movwf	15	;volatile
  1065     05B3                     l964:
  1066                           
  1067                           ;main.c: 144:     OSCCONbits.SCS = 1;
  1068     05B3  140F               	bsf	15,0	;volatile
  1069     05B4                     l138:
  1070     05B4  0008               	return
  1071     05B5                     __end_of_setupintosc:
  1072                           
  1073                           	psect	text2
  1074     05DD                     __ptext2:	
  1075 ;; *************** function _setupPWM2 *****************
  1076 ;; Defined at:
  1077 ;;		line 161 in file "main.c"
  1078 ;; Parameters:    Size  Location     Type
  1079 ;;		None
  1080 ;; Auto vars:     Size  Location     Type
  1081 ;;		None
  1082 ;; Return value:  Size  Location     Type
  1083 ;;                  1    wreg      void 
  1084 ;; Registers used:
  1085 ;;		wreg, status,2, status,0
  1086 ;; Tracked objects:
  1087 ;;		On entry : 0/0
  1088 ;;		On exit  : 0/0
  1089 ;;		Unchanged: 0/0
  1090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1091 ;;      Params:         0       0       0       0       0
  1092 ;;      Locals:         0       0       0       0       0
  1093 ;;      Temps:          0       0       0       0       0
  1094 ;;      Totals:         0       0       0       0       0
  1095 ;;Total ram usage:        0 bytes
  1096 ;; Hardware stack levels used: 1
  1097 ;; This function calls:
  1098 ;;		Nothing
  1099 ;; This function is called by:
  1100 ;;		_main
  1101 ;; This function uses a non-reentrant model
  1102 ;;
  1103                           
  1104     05DD                     _setupPWM2:	
  1105                           ;psect for function _setupPWM2
  1106                           
  1107     05DD                     l982:	
  1108                           ;incstack = 0
  1109                           ; Regs used in _setupPWM2: [wreg+status,2+status,0]
  1110                           
  1111                           
  1112                           ;main.c: 162:     TRISCbits.TRISC1 = 1;
  1113     05DD  1683               	bsf	3,5	;RP0=1, select bank1
  1114     05DE  1303               	bcf	3,6	;RP1=0, select bank1
  1115     05DF  1487               	bsf	7,1	;volatile
  1116     05E0                     l984:
  1117                           
  1118                           ;main.c: 163:     PR2 = 155;
  1119     05E0  309B               	movlw	155
  1120     05E1  0092               	movwf	18	;volatile
  1121     05E2                     l986:
  1122                           
  1123                           ;main.c: 164:     CCP2CONbits.DC2B1 = 0b1;
  1124     05E2  1283               	bcf	3,5	;RP0=0, select bank0
  1125     05E3  1303               	bcf	3,6	;RP1=0, select bank0
  1126     05E4  169D               	bsf	29,5	;volatile
  1127     05E5                     l988:
  1128                           
  1129                           ;main.c: 165:     CCP2CONbits.DC2B0 = 0b1;
  1130     05E5  161D               	bsf	29,4	;volatile
  1131     05E6                     l990:
  1132                           
  1133                           ;main.c: 166:     CCP2CONbits.CCP2M = 0b1111;
  1134     05E6  300F               	movlw	15
  1135     05E7  049D               	iorwf	29,f	;volatile
  1136     05E8                     l992:
  1137                           
  1138                           ;main.c: 167:     CCPR2L = 11;
  1139     05E8  300B               	movlw	11
  1140     05E9  009B               	movwf	27	;volatile
  1141     05EA                     l994:
  1142                           
  1143                           ;main.c: 168:     TMR2IF = 0;
  1144     05EA  108C               	bcf	12,1	;volatile
  1145                           
  1146                           ;main.c: 169:     T2CONbits.T2CKPS = 0b11;
  1147     05EB  3003               	movlw	3
  1148     05EC  0492               	iorwf	18,f	;volatile
  1149     05ED                     l996:
  1150                           
  1151                           ;main.c: 170:     TMR2ON = 1;
  1152     05ED  1512               	bsf	18,2	;volatile
  1153     05EE                     l147:	
  1154                           ;main.c: 171:     while(!TMR2IF){;}
  1155                           
  1156     05EE  1C8C               	btfss	12,1	;volatile
  1157     05EF  2DF1               	goto	u331
  1158     05F0  2DF2               	goto	u330
  1159     05F1                     u331:
  1160     05F1  2DEE               	goto	l147
  1161     05F2                     u330:
  1162     05F2                     l149:
  1163                           
  1164                           ;main.c: 172:     TRISCbits.TRISC1 = 0;
  1165     05F2  1683               	bsf	3,5	;RP0=1, select bank1
  1166     05F3  1303               	bcf	3,6	;RP1=0, select bank1
  1167     05F4  1087               	bcf	7,1	;volatile
  1168     05F5                     l150:
  1169     05F5  0008               	return
  1170     05F6                     __end_of_setupPWM2:
  1171                           
  1172                           	psect	text3
  1173     05F6                     __ptext3:	
  1174 ;; *************** function _setupPWM *****************
  1175 ;; Defined at:
  1176 ;;		line 147 in file "main.c"
  1177 ;; Parameters:    Size  Location     Type
  1178 ;;		None
  1179 ;; Auto vars:     Size  Location     Type
  1180 ;;		None
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  1    wreg      void 
  1183 ;; Registers used:
  1184 ;;		wreg, status,2, status,0
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1190 ;;      Params:         0       0       0       0       0
  1191 ;;      Locals:         0       0       0       0       0
  1192 ;;      Temps:          0       0       0       0       0
  1193 ;;      Totals:         0       0       0       0       0
  1194 ;;Total ram usage:        0 bytes
  1195 ;; Hardware stack levels used: 1
  1196 ;; This function calls:
  1197 ;;		Nothing
  1198 ;; This function is called by:
  1199 ;;		_main
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203     05F6                     _setupPWM:	
  1204                           ;psect for function _setupPWM
  1205                           
  1206     05F6                     l966:	
  1207                           ;incstack = 0
  1208                           ; Regs used in _setupPWM: [wreg+status,2+status,0]
  1209                           
  1210                           
  1211                           ;main.c: 148:     TRISCbits.TRISC2 = 1;
  1212     05F6  1683               	bsf	3,5	;RP0=1, select bank1
  1213     05F7  1303               	bcf	3,6	;RP1=0, select bank1
  1214     05F8  1507               	bsf	7,2	;volatile
  1215     05F9                     l968:
  1216                           
  1217                           ;main.c: 149:     PR2 = 155;
  1218     05F9  309B               	movlw	155
  1219     05FA  0092               	movwf	18	;volatile
  1220     05FB                     l970:
  1221                           
  1222                           ;main.c: 150:     CCP1CONbits.P1M = 0b00;
  1223     05FB  303F               	movlw	-193
  1224     05FC  1283               	bcf	3,5	;RP0=0, select bank0
  1225     05FD  1303               	bcf	3,6	;RP1=0, select bank0
  1226     05FE  0597               	andwf	23,f	;volatile
  1227     05FF                     l972:
  1228                           
  1229                           ;main.c: 151:     CCP1CONbits.CCP1M = 0b1100;
  1230     05FF  0817               	movf	23,w	;volatile
  1231     0600  39F0               	andlw	-16
  1232     0601  380C               	iorlw	12
  1233     0602  0097               	movwf	23	;volatile
  1234     0603                     l974:
  1235                           
  1236                           ;main.c: 152:     CCP1CONbits.DC1B = 0b11;
  1237     0603  3030               	movlw	48
  1238     0604  0497               	iorwf	23,f	;volatile
  1239     0605                     l976:
  1240                           
  1241                           ;main.c: 153:     CCPR1L = 11;
  1242     0605  300B               	movlw	11
  1243     0606  0095               	movwf	21	;volatile
  1244     0607                     l978:
  1245                           
  1246                           ;main.c: 154:     TMR2IF = 0;
  1247     0607  108C               	bcf	12,1	;volatile
  1248                           
  1249                           ;main.c: 155:     T2CONbits.T2CKPS = 0b11;
  1250     0608  3003               	movlw	3
  1251     0609  0492               	iorwf	18,f	;volatile
  1252     060A                     l980:
  1253                           
  1254                           ;main.c: 156:     TMR2ON = 1;
  1255     060A  1512               	bsf	18,2	;volatile
  1256     060B                     l141:	
  1257                           ;main.c: 157:     while(!TMR2IF){;}
  1258                           
  1259     060B  1C8C               	btfss	12,1	;volatile
  1260     060C  2E0E               	goto	u321
  1261     060D  2E0F               	goto	u320
  1262     060E                     u321:
  1263     060E  2E0B               	goto	l141
  1264     060F                     u320:
  1265     060F                     l143:
  1266                           
  1267                           ;main.c: 158:     TRISCbits.TRISC2 = 0;
  1268     060F  1683               	bsf	3,5	;RP0=1, select bank1
  1269     0610  1303               	bcf	3,6	;RP1=0, select bank1
  1270     0611  1107               	bcf	7,2	;volatile
  1271     0612                     l144:
  1272     0612  0008               	return
  1273     0613                     __end_of_setupPWM:
  1274                           
  1275                           	psect	text4
  1276     0613                     __ptext4:	
  1277 ;; *************** function _setupADC *****************
  1278 ;; Defined at:
  1279 ;;		line 175 in file "main.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;		None
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;		None
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  1    wreg      void 
  1286 ;; Registers used:
  1287 ;;		wreg
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1293 ;;      Params:         0       0       0       0       0
  1294 ;;      Locals:         0       0       0       0       0
  1295 ;;      Temps:          1       0       0       0       0
  1296 ;;      Totals:         1       0       0       0       0
  1297 ;;Total ram usage:        1 bytes
  1298 ;; Hardware stack levels used: 1
  1299 ;; This function calls:
  1300 ;;		Nothing
  1301 ;; This function is called by:
  1302 ;;		_main
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306     0613                     _setupADC:	
  1307                           ;psect for function _setupADC
  1308                           
  1309     0613                     l998:	
  1310                           ;incstack = 0
  1311                           ; Regs used in _setupADC: [wreg]
  1312                           
  1313                           
  1314                           ;main.c: 176:     TRISAbits.TRISA0 = 1;
  1315     0613  1683               	bsf	3,5	;RP0=1, select bank1
  1316     0614  1303               	bcf	3,6	;RP1=0, select bank1
  1317     0615  1405               	bsf	5,0	;volatile
  1318                           
  1319                           ;main.c: 177:     ANSELbits.ANS0 = 1;
  1320     0616  1683               	bsf	3,5	;RP0=1, select bank3
  1321     0617  1703               	bsf	3,6	;RP1=1, select bank3
  1322     0618  1408               	bsf	8,0	;volatile
  1323                           
  1324                           ;main.c: 179:     TRISAbits.TRISA1 = 1;
  1325     0619  1683               	bsf	3,5	;RP0=1, select bank1
  1326     061A  1303               	bcf	3,6	;RP1=0, select bank1
  1327     061B  1485               	bsf	5,1	;volatile
  1328                           
  1329                           ;main.c: 180:     ANSELbits.ANS1 = 1;
  1330     061C  1683               	bsf	3,5	;RP0=1, select bank3
  1331     061D  1703               	bsf	3,6	;RP1=1, select bank3
  1332     061E  1488               	bsf	8,1	;volatile
  1333                           
  1334                           ;main.c: 182:     ADCON0bits.ADCS1 = 0;
  1335     061F  1283               	bcf	3,5	;RP0=0, select bank0
  1336     0620  1303               	bcf	3,6	;RP1=0, select bank0
  1337     0621  139F               	bcf	31,7	;volatile
  1338                           
  1339                           ;main.c: 183:     ADCON0bits.ADCS0 = 1;
  1340     0622  171F               	bsf	31,6	;volatile
  1341                           
  1342                           ;main.c: 185:     ADCON1bits.VCFG1 = 0;
  1343     0623  1683               	bsf	3,5	;RP0=1, select bank1
  1344     0624  1303               	bcf	3,6	;RP1=0, select bank1
  1345     0625  129F               	bcf	31,5	;volatile
  1346                           
  1347                           ;main.c: 186:     ADCON1bits.VCFG0 = 0;
  1348     0626  121F               	bcf	31,4	;volatile
  1349                           
  1350                           ;main.c: 188:     ADCON1bits.ADFM = 0;
  1351     0627  139F               	bcf	31,7	;volatile
  1352                           
  1353                           ;main.c: 190:     ADCON0bits.ADON = 1;
  1354     0628  1283               	bcf	3,5	;RP0=0, select bank0
  1355     0629  1303               	bcf	3,6	;RP1=0, select bank0
  1356     062A  141F               	bsf	31,0	;volatile
  1357     062B                     l1000:
  1358                           
  1359                           ;main.c: 191:     _delay((unsigned long)((100)*(500000/4000000.0)));
  1360     062B  3003               	movlw	3
  1361     062C  00F0               	movwf	??_setupADC
  1362     062D                     u707:
  1363     062D  0BF0               	decfsz	??_setupADC,f
  1364     062E  2E2D               	goto	u707
  1365     062F  2E30               	nop2
  1366     0630                     l153:
  1367     0630  0008               	return
  1368     0631                     __end_of_setupADC:
  1369                           
  1370                           	psect	text5
  1371     05C5                     __ptext5:	
  1372 ;; *************** function _setup *****************
  1373 ;; Defined at:
  1374 ;;		line 130 in file "main.c"
  1375 ;; Parameters:    Size  Location     Type
  1376 ;;		None
  1377 ;; Auto vars:     Size  Location     Type
  1378 ;;		None
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  1    wreg      void 
  1381 ;; Registers used:
  1382 ;;		status,2
  1383 ;; Tracked objects:
  1384 ;;		On entry : 0/0
  1385 ;;		On exit  : 0/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1388 ;;      Params:         0       0       0       0       0
  1389 ;;      Locals:         0       0       0       0       0
  1390 ;;      Temps:          0       0       0       0       0
  1391 ;;      Totals:         0       0       0       0       0
  1392 ;;Total ram usage:        0 bytes
  1393 ;; Hardware stack levels used: 1
  1394 ;; This function calls:
  1395 ;;		Nothing
  1396 ;; This function is called by:
  1397 ;;		_main
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401     05C5                     _setup:	
  1402                           ;psect for function _setup
  1403                           
  1404     05C5                     l948:	
  1405                           ;incstack = 0
  1406                           ; Regs used in _setup: [status,2]
  1407                           
  1408                           
  1409                           ;main.c: 131:     ANSELH = 0;
  1410     05C5  1683               	bsf	3,5	;RP0=1, select bank3
  1411     05C6  1703               	bsf	3,6	;RP1=1, select bank3
  1412     05C7  0189               	clrf	9	;volatile
  1413     05C8                     l950:
  1414                           
  1415                           ;main.c: 132:     TRISBbits.TRISB1 = 1;
  1416     05C8  1683               	bsf	3,5	;RP0=1, select bank1
  1417     05C9  1303               	bcf	3,6	;RP1=0, select bank1
  1418     05CA  1486               	bsf	6,1	;volatile
  1419     05CB                     l952:
  1420                           
  1421                           ;main.c: 133:     TRISBbits.TRISB2 = 1;
  1422     05CB  1506               	bsf	6,2	;volatile
  1423     05CC                     l954:
  1424                           
  1425                           ;main.c: 134:     TRISBbits.TRISB3 = 0;
  1426     05CC  1186               	bcf	6,3	;volatile
  1427     05CD                     l956:
  1428                           
  1429                           ;main.c: 135:     PORTBbits.RB3 = 0;
  1430     05CD  1283               	bcf	3,5	;RP0=0, select bank0
  1431     05CE  1303               	bcf	3,6	;RP1=0, select bank0
  1432     05CF  1186               	bcf	6,3	;volatile
  1433     05D0                     l958:
  1434                           
  1435                           ;main.c: 136:     TRISBbits.TRISB4 = 0;
  1436     05D0  1683               	bsf	3,5	;RP0=1, select bank1
  1437     05D1  1303               	bcf	3,6	;RP1=0, select bank1
  1438     05D2  1206               	bcf	6,4	;volatile
  1439     05D3                     l960:
  1440                           
  1441                           ;main.c: 137:     PORTBbits.RB4 = 0;
  1442     05D3  1283               	bcf	3,5	;RP0=0, select bank0
  1443     05D4  1303               	bcf	3,6	;RP1=0, select bank0
  1444     05D5  1206               	bcf	6,4	;volatile
  1445                           
  1446                           ;main.c: 138:     TRISD = 0;
  1447     05D6  1683               	bsf	3,5	;RP0=1, select bank1
  1448     05D7  1303               	bcf	3,6	;RP1=0, select bank1
  1449     05D8  0188               	clrf	8	;volatile
  1450                           
  1451                           ;main.c: 139:     PORTD = 0;
  1452     05D9  1283               	bcf	3,5	;RP0=0, select bank0
  1453     05DA  1303               	bcf	3,6	;RP1=0, select bank0
  1454     05DB  0188               	clrf	8	;volatile
  1455     05DC                     l135:
  1456     05DC  0008               	return
  1457     05DD                     __end_of_setup:
  1458                           
  1459                           	psect	text6
  1460     0631                     __ptext6:	
  1461 ;; *************** function _mandar *****************
  1462 ;; Defined at:
  1463 ;;		line 122 in file "main.c"
  1464 ;; Parameters:    Size  Location     Type
  1465 ;;  cadena          1    wreg     PTR unsigned char 
  1466 ;;		 -> STR_4(40), STR_3(40), STR_2(35), STR_1(35), 
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;  cadena          1    1[COMMON] PTR unsigned char 
  1469 ;;		 -> STR_4(40), STR_3(40), STR_2(35), STR_1(35), 
  1470 ;; Return value:  Size  Location     Type
  1471 ;;                  1    wreg      void 
  1472 ;; Registers used:
  1473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1474 ;; Tracked objects:
  1475 ;;		On entry : 0/0
  1476 ;;		On exit  : 0/0
  1477 ;;		Unchanged: 0/0
  1478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1479 ;;      Params:         0       0       0       0       0
  1480 ;;      Locals:         1       0       0       0       0
  1481 ;;      Temps:          1       0       0       0       0
  1482 ;;      Totals:         2       0       0       0       0
  1483 ;;Total ram usage:        2 bytes
  1484 ;; Hardware stack levels used: 2
  1485 ;; This function calls:
  1486 ;;		Nothing
  1487 ;; This function is called by:
  1488 ;;		_main
  1489 ;; This function uses a non-reentrant model
  1490 ;;
  1491                           
  1492     0631                     _mandar:	
  1493                           ;psect for function _mandar
  1494                           
  1495                           
  1496                           ;incstack = 0
  1497                           ; Regs used in _mandar: [wreg-fsr0h+status,2+status,0+pclath]
  1498                           ;mandar@cadena stored from wreg
  1499     0631  00F1               	movwf	mandar@cadena
  1500     0632                     l1014:
  1501                           
  1502                           ;main.c: 123:     while(*cadena != '\0'){
  1503     0632  2E45               	goto	l1020
  1504     0633                     l128:
  1505     0633  1283               	bcf	3,5	;RP0=0, select bank0
  1506     0634  1303               	bcf	3,6	;RP1=0, select bank0
  1507     0635  1E0C               	btfss	12,4	;volatile
  1508     0636  2E38               	goto	u341
  1509     0637  2E39               	goto	u340
  1510     0638                     u341:
  1511     0638  2E33               	goto	l128
  1512     0639                     u340:
  1513     0639                     l1016:
  1514                           
  1515                           ;main.c: 125:         TXREG = *cadena;
  1516     0639  0871               	movf	mandar@cadena,w
  1517     063A  0084               	movwf	4
  1518     063B  120A  118A  2003  120A  118A  	fcall	stringdir
  1519     0640  0099               	movwf	25	;volatile
  1520     0641                     l1018:
  1521                           
  1522                           ;main.c: 126:         *cadena++;
  1523     0641  3001               	movlw	1
  1524     0642  00F0               	movwf	??_mandar
  1525     0643  0870               	movf	??_mandar,w
  1526     0644  07F1               	addwf	mandar@cadena,f
  1527     0645                     l1020:
  1528                           
  1529                           ;main.c: 123:     while(*cadena != '\0'){
  1530     0645  0871               	movf	mandar@cadena,w
  1531     0646  0084               	movwf	4
  1532     0647  120A  118A  2003  120A  118A  	fcall	stringdir
  1533     064C  3A00               	xorlw	0
  1534     064D  1D03               	skipz
  1535     064E  2E50               	goto	u351
  1536     064F  2E51               	goto	u350
  1537     0650                     u351:
  1538     0650  2E33               	goto	l128
  1539     0651                     u350:
  1540     0651                     l132:
  1541     0651  0008               	return
  1542     0652                     __end_of_mandar:
  1543                           
  1544                           	psect	text7
  1545     05B5                     __ptext7:	
  1546 ;; *************** function _initUART *****************
  1547 ;; Defined at:
  1548 ;;		line 194 in file "main.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;		None
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;		None
  1553 ;; Return value:  Size  Location     Type
  1554 ;;                  1    wreg      void 
  1555 ;; Registers used:
  1556 ;;		wreg
  1557 ;; Tracked objects:
  1558 ;;		On entry : 0/0
  1559 ;;		On exit  : 0/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1562 ;;      Params:         0       0       0       0       0
  1563 ;;      Locals:         0       0       0       0       0
  1564 ;;      Temps:          0       0       0       0       0
  1565 ;;      Totals:         0       0       0       0       0
  1566 ;;Total ram usage:        0 bytes
  1567 ;; Hardware stack levels used: 1
  1568 ;; This function calls:
  1569 ;;		Nothing
  1570 ;; This function is called by:
  1571 ;;		_main
  1572 ;; This function uses a non-reentrant model
  1573 ;;
  1574                           
  1575     05B5                     _initUART:	
  1576                           ;psect for function _initUART
  1577                           
  1578     05B5                     l1002:	
  1579                           ;incstack = 0
  1580                           ; Regs used in _initUART: [wreg]
  1581                           
  1582                           
  1583                           ;main.c: 196:     SPBRG = 12;
  1584     05B5  300C               	movlw	12
  1585     05B6  1683               	bsf	3,5	;RP0=1, select bank1
  1586     05B7  1303               	bcf	3,6	;RP1=0, select bank1
  1587     05B8  0099               	movwf	25	;volatile
  1588     05B9                     l1004:
  1589                           
  1590                           ;main.c: 198:     TXSTAbits.SYNC = 0;
  1591     05B9  1218               	bcf	24,4	;volatile
  1592     05BA                     l1006:
  1593                           
  1594                           ;main.c: 199:     RCSTAbits.SPEN = 1;
  1595     05BA  1283               	bcf	3,5	;RP0=0, select bank0
  1596     05BB  1303               	bcf	3,6	;RP1=0, select bank0
  1597     05BC  1798               	bsf	24,7	;volatile
  1598     05BD                     l1008:
  1599                           
  1600                           ;main.c: 203:     TXSTAbits.TXEN = 1;
  1601     05BD  1683               	bsf	3,5	;RP0=1, select bank1
  1602     05BE  1303               	bcf	3,6	;RP1=0, select bank1
  1603     05BF  1698               	bsf	24,5	;volatile
  1604     05C0                     l1010:
  1605                           
  1606                           ;main.c: 204:     PIR1bits.TXIF = 0;
  1607     05C0  1283               	bcf	3,5	;RP0=0, select bank0
  1608     05C1  1303               	bcf	3,6	;RP1=0, select bank0
  1609     05C2  120C               	bcf	12,4	;volatile
  1610     05C3                     l1012:
  1611                           
  1612                           ;main.c: 205:     RCSTAbits.CREN = 1;
  1613     05C3  1618               	bsf	24,4	;volatile
  1614     05C4                     l156:
  1615     05C4  0008               	return
  1616     05C5                     __end_of_initUART:
  1617                           
  1618                           	psect	text8
  1619     0652                     __ptext8:	
  1620 ;; *************** function ___awdiv *****************
  1621 ;; Defined at:
  1622 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awdiv.c"
  1623 ;; Parameters:    Size  Location     Type
  1624 ;;  divisor         2    0[COMMON] int 
  1625 ;;  dividend        2    2[COMMON] int 
  1626 ;; Auto vars:     Size  Location     Type
  1627 ;;  quotient        2    7[COMMON] int 
  1628 ;;  sign            1    6[COMMON] unsigned char 
  1629 ;;  counter         1    5[COMMON] unsigned char 
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  2    0[COMMON] int 
  1632 ;; Registers used:
  1633 ;;		wreg, status,2, status,0
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1639 ;;      Params:         4       0       0       0       0
  1640 ;;      Locals:         4       0       0       0       0
  1641 ;;      Temps:          1       0       0       0       0
  1642 ;;      Totals:         9       0       0       0       0
  1643 ;;Total ram usage:        9 bytes
  1644 ;; Hardware stack levels used: 1
  1645 ;; This function calls:
  1646 ;;		Nothing
  1647 ;; This function is called by:
  1648 ;;		_main
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652     0652                     ___awdiv:	
  1653                           ;psect for function ___awdiv
  1654                           
  1655     0652                     l1022:	
  1656                           ;incstack = 0
  1657                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1658                           
  1659     0652  01F6               	clrf	___awdiv@sign
  1660     0653                     l1024:
  1661     0653  1FF1               	btfss	___awdiv@divisor+1,7
  1662     0654  2E56               	goto	u361
  1663     0655  2E57               	goto	u360
  1664     0656                     u361:
  1665     0656  2E5E               	goto	l1030
  1666     0657                     u360:
  1667     0657                     l1026:
  1668     0657  09F0               	comf	___awdiv@divisor,f
  1669     0658  09F1               	comf	___awdiv@divisor+1,f
  1670     0659  0AF0               	incf	___awdiv@divisor,f
  1671     065A  1903               	skipnz
  1672     065B  0AF1               	incf	___awdiv@divisor+1,f
  1673     065C                     l1028:
  1674     065C  01F6               	clrf	___awdiv@sign
  1675     065D  0AF6               	incf	___awdiv@sign,f
  1676     065E                     l1030:
  1677     065E  1FF3               	btfss	___awdiv@dividend+1,7
  1678     065F  2E61               	goto	u371
  1679     0660  2E62               	goto	u370
  1680     0661                     u371:
  1681     0661  2E6B               	goto	l1036
  1682     0662                     u370:
  1683     0662                     l1032:
  1684     0662  09F2               	comf	___awdiv@dividend,f
  1685     0663  09F3               	comf	___awdiv@dividend+1,f
  1686     0664  0AF2               	incf	___awdiv@dividend,f
  1687     0665  1903               	skipnz
  1688     0666  0AF3               	incf	___awdiv@dividend+1,f
  1689     0667                     l1034:
  1690     0667  3001               	movlw	1
  1691     0668  00F4               	movwf	??___awdiv
  1692     0669  0874               	movf	??___awdiv,w
  1693     066A  06F6               	xorwf	___awdiv@sign,f
  1694     066B                     l1036:
  1695     066B  01F7               	clrf	___awdiv@quotient
  1696     066C  01F8               	clrf	___awdiv@quotient+1
  1697     066D                     l1038:
  1698     066D  0870               	movf	___awdiv@divisor,w
  1699     066E  0471               	iorwf	___awdiv@divisor+1,w
  1700     066F  1903               	btfsc	3,2
  1701     0670  2E72               	goto	u381
  1702     0671  2E73               	goto	u380
  1703     0672                     u381:
  1704     0672  2EAA               	goto	l1058
  1705     0673                     u380:
  1706     0673                     l1040:
  1707     0673  01F5               	clrf	___awdiv@counter
  1708     0674  0AF5               	incf	___awdiv@counter,f
  1709     0675  2E81               	goto	l1046
  1710     0676                     l1042:
  1711     0676  3001               	movlw	1
  1712     0677                     u395:
  1713     0677  1003               	clrc
  1714     0678  0DF0               	rlf	___awdiv@divisor,f
  1715     0679  0DF1               	rlf	___awdiv@divisor+1,f
  1716     067A  3EFF               	addlw	-1
  1717     067B  1D03               	skipz
  1718     067C  2E77               	goto	u395
  1719     067D                     l1044:
  1720     067D  3001               	movlw	1
  1721     067E  00F4               	movwf	??___awdiv
  1722     067F  0874               	movf	??___awdiv,w
  1723     0680  07F5               	addwf	___awdiv@counter,f
  1724     0681                     l1046:
  1725     0681  1FF1               	btfss	___awdiv@divisor+1,7
  1726     0682  2E84               	goto	u401
  1727     0683  2E85               	goto	u400
  1728     0684                     u401:
  1729     0684  2E76               	goto	l1042
  1730     0685                     u400:
  1731     0685                     l1048:
  1732     0685  3001               	movlw	1
  1733     0686                     u415:
  1734     0686  1003               	clrc
  1735     0687  0DF7               	rlf	___awdiv@quotient,f
  1736     0688  0DF8               	rlf	___awdiv@quotient+1,f
  1737     0689  3EFF               	addlw	-1
  1738     068A  1D03               	skipz
  1739     068B  2E86               	goto	u415
  1740     068C  0871               	movf	___awdiv@divisor+1,w
  1741     068D  0273               	subwf	___awdiv@dividend+1,w
  1742     068E  1D03               	skipz
  1743     068F  2E92               	goto	u425
  1744     0690  0870               	movf	___awdiv@divisor,w
  1745     0691  0272               	subwf	___awdiv@dividend,w
  1746     0692                     u425:
  1747     0692  1C03               	skipc
  1748     0693  2E95               	goto	u421
  1749     0694  2E96               	goto	u420
  1750     0695                     u421:
  1751     0695  2E9D               	goto	l1054
  1752     0696                     u420:
  1753     0696                     l1050:
  1754     0696  0870               	movf	___awdiv@divisor,w
  1755     0697  02F2               	subwf	___awdiv@dividend,f
  1756     0698  0871               	movf	___awdiv@divisor+1,w
  1757     0699  1C03               	skipc
  1758     069A  03F3               	decf	___awdiv@dividend+1,f
  1759     069B  02F3               	subwf	___awdiv@dividend+1,f
  1760     069C                     l1052:
  1761     069C  1477               	bsf	___awdiv@quotient,0
  1762     069D                     l1054:
  1763     069D  3001               	movlw	1
  1764     069E                     u435:
  1765     069E  1003               	clrc
  1766     069F  0CF1               	rrf	___awdiv@divisor+1,f
  1767     06A0  0CF0               	rrf	___awdiv@divisor,f
  1768     06A1  3EFF               	addlw	-1
  1769     06A2  1D03               	skipz
  1770     06A3  2E9E               	goto	u435
  1771     06A4                     l1056:
  1772     06A4  3001               	movlw	1
  1773     06A5  02F5               	subwf	___awdiv@counter,f
  1774     06A6  1D03               	btfss	3,2
  1775     06A7  2EA9               	goto	u441
  1776     06A8  2EAA               	goto	u440
  1777     06A9                     u441:
  1778     06A9  2E85               	goto	l1048
  1779     06AA                     u440:
  1780     06AA                     l1058:
  1781     06AA  0876               	movf	___awdiv@sign,w
  1782     06AB  1903               	btfsc	3,2
  1783     06AC  2EAE               	goto	u451
  1784     06AD  2EAF               	goto	u450
  1785     06AE                     u451:
  1786     06AE  2EB4               	goto	l1062
  1787     06AF                     u450:
  1788     06AF                     l1060:
  1789     06AF  09F7               	comf	___awdiv@quotient,f
  1790     06B0  09F8               	comf	___awdiv@quotient+1,f
  1791     06B1  0AF7               	incf	___awdiv@quotient,f
  1792     06B2  1903               	skipnz
  1793     06B3  0AF8               	incf	___awdiv@quotient+1,f
  1794     06B4                     l1062:
  1795     06B4  0878               	movf	___awdiv@quotient+1,w
  1796     06B5  00F1               	movwf	?___awdiv+1
  1797     06B6  0877               	movf	___awdiv@quotient,w
  1798     06B7  00F0               	movwf	?___awdiv
  1799     06B8                     l395:
  1800     06B8  0008               	return
  1801     06B9                     __end_of___awdiv:
  1802     007E                     btemp	set	126	;btemp
  1803     007E                     wtemp0	set	126
  1804                           
  1805                           	psect	idloc
  1806                           
  1807                           ;Config register IDLOC0 @ 0x2000
  1808                           ;	unspecified, using default values
  1809     2000                     	org	8192
  1810     2000  3FFF               	dw	16383
  1811                           
  1812                           ;Config register IDLOC1 @ 0x2001
  1813                           ;	unspecified, using default values
  1814     2001                     	org	8193
  1815     2001  3FFF               	dw	16383
  1816                           
  1817                           ;Config register IDLOC2 @ 0x2002
  1818                           ;	unspecified, using default values
  1819     2002                     	org	8194
  1820     2002  3FFF               	dw	16383
  1821                           
  1822                           ;Config register IDLOC3 @ 0x2003
  1823                           ;	unspecified, using default values
  1824     2003                     	org	8195
  1825     2003  3FFF               	dw	16383
  1826                           
  1827                           	psect	config
  1828                           
  1829                           ;Config register CONFIG1 @ 0x2007
  1830                           ;	Oscillator Selection bits
  1831                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1832                           ;	Watchdog Timer Enable bit
  1833                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1834                           ;	Power-up Timer Enable bit
  1835                           ;	PWRTE = OFF, PWRT disabled
  1836                           ;	RE3/MCLR pin function select bit
  1837                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1838                           ;	Code Protection bit
  1839                           ;	CP = OFF, Program memory code protection is disabled
  1840                           ;	Data Code Protection bit
  1841                           ;	CPD = OFF, Data memory code protection is disabled
  1842                           ;	Brown Out Reset Selection bits
  1843                           ;	BOREN = OFF, BOR disabled
  1844                           ;	Internal External Switchover bit
  1845                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1846                           ;	Fail-Safe Clock Monitor Enabled bit
  1847                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1848                           ;	Low Voltage Programming Enable bit
  1849                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1850                           ;	In-Circuit Debugger Mode bit
  1851                           ;	DEBUG = 0x1, unprogramme  1852     2007                     	org	8199
  1853     2007  20D4               	dw	8404
  1854                           
  1855                           ;Config register CONFIG2 @ 0x2008
  1856                           ;	Brown-out Reset Selection bit
  1857                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1858                           ;	Flash Program Memory Self Write Enable bits
  1859                           ;	WRT = OFF, Write protection off
  1860     2008                     	org	8200
  1861     2008  3FFF               	dw	16383

Data Sizes:
    Strings     110
    Constant    0
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80      0       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    mandar@cadena	PTR unsigned char  size(1) Largest target is 40
		 -> STR_4(CODE[40]), STR_3(CODE[40]), STR_2(CODE[35]), STR_1(CODE[35]), 


Critical Paths under _main in COMMON

    _main->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     781
                                              9 COMMON     2     2      0
                            ___awdiv
                           _initUART
                             _mandar
                              _setup
                           _setupADC
                           _setupPWM
                          _setupPWM2
                        _setupintosc
 ---------------------------------------------------------------------------------
 (1) _setupintosc                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupPWM2                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupPWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _mandar                                               2     2      0     177
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     604
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   _initUART
   _mandar
   _setup
   _setupADC
   _setupPWM
   _setupPWM2
   _setupintosc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      12       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       4       5        5.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      12      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Nov 11 18:54:44 2022

                      _a 007B                        _i 007D                        pc 0002  
                     l90 06EB                       l94 0715                       l96 0719  
                     l99 075B             ___awdiv@sign 0076                       fsr 0004  
                    l101 075F                      l104 07EF                      l105 07A5  
                    l132 0651                      l116 07E0                      l141 060B  
                    l109 07C2                      l150 05F5                      l135 05DC  
                    l143 060F                      l128 0633                      l144 0612  
                    l153 0630                      l138 05B4                      l147 05EE  
                    l156 05C4                      l149 05F2                      l395 06B8  
                    l950 05C8                      l960 05D3                      l952 05CB  
                    l954 05CC                      l970 05FB                      l962 05AD  
                    l956 05CD                      l948 05C5                      l980 060A  
                    l972 05FF                      l964 05B3                      l958 05D0  
                    l974 0603                      l966 05F6                      l990 05E6  
                    l982 05DD                      l976 0605                      l968 05F9  
                    l992 05E8                      l984 05E0                      l978 0607  
                    l994 05EA                      l986 05E2                      l996 05ED  
                    l988 05E5                      l998 0613                      u400 0685  
                    u320 060F                      u401 0684                      u321 060E  
                    u330 05F2                      u331 05F1                      u420 0696  
                    u340 0639                      u500 0736                      u421 0695  
                    u341 0638                      u501 0735                      u350 0651  
                    u510 073C                      _PR2 0092                      u415 0686  
                    u351 0650                      u511 073B                      u440 06AA  
                    u360 0657                      u600 07D7                      u520 075F  
                    u441 06A9                      u425 0692                      u361 0656  
                    u601 07D6                      u521 075E                      u450 06AF  
                    u370 0662                      u610 07E8                      u530 077C  
                    u451 06AE                      u435 069E                      u371 0661  
                    u611 07E7                      u531 077B                      u380 0673  
                    u620 07EE                      u540 0782                      u460 06DD  
                    u381 0672                      u621 07ED                      u541 0781  
                    u461 06DC                      u550 0795                      u470 06EF  
                    u551 0794                      u471 06EE                      u560 07AB  
                    u480 0705                      u561 07AA                      u481 0704  
                    u570 07B9                      u490 0719                      u395 0677  
                    u707 062D                      u571 07B8                      u491 0718  
                    u580 07CA                      u581 07C9                      u637 06E1  
                    u590 07D0                      u591 07CF                      u647 06F3  
                    u657 070D                      u667 0744                      u677 0753  
                    u687 078A                      u697 07AD                      fsr0 0004  
                   l1000 062B                     l1010 05C0                     l1002 05B5  
                   l1012 05C3                     l1004 05B9                     l1020 0645  
                   l1100 0721                     l1030 065E                     l1022 0652  
                   l1006 05BA                     l1014 0632                     l1110 074F  
                   l1102 0730                     l1040 0673                     l1032 0662  
                   l1024 0653                     l1008 05BD                     l1016 0639  
                   l1120 077C                     l1112 0758                     l1104 0736  
                   l1050 0696                     l1042 0676                     l1034 0667  
                   l1026 0657                     l1018 0641                     l1130 07AB  
                   l1122 0782                     l1114 0760                     l1106 073C  
                   l1060 06AF                     l1052 069C                     l1044 067D  
                   l1036 066B                     l1028 065C                     l1140 07D1  
                   l1132 07B4                     l1116 0767                     l1108 0749  
                   l1124 078F                     l1062 06B4                     l1054 069D  
                   l1046 0681                     l1038 066D                     l1142 07D7  
                   l1134 07B9                     l1126 0795                     l1118 0776  
                   l1070 06C3                     l1056 06A4                     l1048 0685  
                   l1144 07DE                     l1136 07C0                     l1128 0799  
                   l1080 06DD                     l1072 06C8                     l1058 06AA  
                   l1146 07E8                     l1138 07CA                     l1090 0705  
                   l1082 06E6                     l1074 06CD                     l1066 06B9  
                   l1092 0707                     l1084 06EF                     l1076 06D2  
                   l1068 06BE                     l1094 0709                     l1086 06F8  
                   l1078 06D7                     l1096 0712                     l1088 06FC  
                   l1098 071A                     _ADC1 0022                     _ADC2 0020  
                   _ADIF 0066                     STR_1 0031                     STR_2 0054  
                   STR_3 0009                     STR_4 0009                     _RCIF 0065  
                   _TXIF 0064                     _main 06B9                     btemp 007E  
                   start 0000                    ?_main 0070          __end_of___awdiv 06B9  
        ___awdiv@divisor 0070          ___awdiv@counter 0075                    _RCREG 001A  
                  _SPBRG 0099                    _PORTD 0008                    _TRISD 0088  
                  _TXREG 0019                    _setup 05C5                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07F3  
           __end_of_main 07F3                   ??_main 0079                   _ADRESH 001E  
                 _CCPR1L 0015                   _CCPR2L 001B         ___awdiv@dividend 0072  
                 ?_setup 0070                   _ANSELH 0189                   _TMR2IF 0061  
                 _TMR2ON 0092             mandar@cadena 0071                ??___awdiv 0074  
       __end_of_initUART 05C5                   _mandar 0631         ___awdiv@quotient 0077  
       __end_of_setupADC 0631         __end_of_setupPWM 0613  __end_of__initialization 07FC  
           ?_setupintosc 0070           __pcstackCOMMON 0070            __end_of_setup 05DD  
                ??_setup 0070               __pbssBANK0 0020               __pmaintext 06B9  
                ?_mandar 0070               __stringtab 0003                ?_initUART 0070  
              ?_setupADC 0070                ?_setupPWM 0070                  ___awdiv 0652  
              _ANSELbits 0188                  __ptext1 05AD                  __ptext2 05DD  
                __ptext3 05F6                  __ptext4 0613                  __ptext5 05C5  
                __ptext6 0631                  __ptext7 05B5                  __ptext8 0652  
              _T2CONbits 0012     end_of_initialization 07FC               ??_initUART 0070  
      __end_of_setupPWM2 05F6               ??_setupADC 0070                _RCSTAbits 0018  
             ??_setupPWM 0070                _PORTBbits 0006                _TRISAbits 0085  
              _TRISBbits 0086                _TRISCbits 0087              _CCP1CONbits 0017  
            _CCP2CONbits 001D                _TXSTAbits 0098           __end_of_mandar 0652  
    start_initialization 07F3                 ??_mandar 0070              __pbssCOMMON 007B  
              ___latbits 0002                 ?___awdiv 0070                __pstrings 0003  
               _PIR1bits 000C                _setupPWM2 05DD               _ADCON0bits 001F  
            __stringbase 0008               _ADCON1bits 009F            ??_setupintosc 0070  
             ?_setupPWM2 0070       __end_of__stringtab 0009                 _initUART 05B5  
               _recibido 007C                 _setupADC 0613                 _setupPWM 05F6  
    __end_of_setupintosc 05B5                stringcode 0003               _OSCCONbits 008F  
            ??_setupPWM2 0070                 stringdir 0003                 stringtab 0003  
            _setupintosc 05AD  
